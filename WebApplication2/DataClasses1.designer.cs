#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="mybd")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void Inserttracks(tracks instance);
    partial void Updatetracks(tracks instance);
    partial void Deletetracks(tracks instance);
    partial void Insertusers(users instance);
    partial void Updateusers(users instance);
    partial void Deleteusers(users instance);
    partial void InsertЗарплаты(Зарплаты instance);
    partial void UpdateЗарплаты(Зарплаты instance);
    partial void DeleteЗарплаты(Зарплаты instance);
    partial void InsertИзвещения(Извещения instance);
    partial void UpdateИзвещения(Извещения instance);
    partial void DeleteИзвещения(Извещения instance);
    partial void Insertимеют(имеют instance);
    partial void Updateимеют(имеют instance);
    partial void Deleteимеют(имеют instance);
    partial void InsertПочтовые_отправления(Почтовые_отправления instance);
    partial void UpdateПочтовые_отправления(Почтовые_отправления instance);
    partial void DeleteПочтовые_отправления(Почтовые_отправления instance);
    partial void InsertСвязующая(Связующая instance);
    partial void UpdateСвязующая(Связующая instance);
    partial void DeleteСвязующая(Связующая instance);
    partial void InsertСклады(Склады instance);
    partial void UpdateСклады(Склады instance);
    partial void DeleteСклады(Склады instance);
    partial void InsertСотрудники(Сотрудники instance);
    partial void UpdateСотрудники(Сотрудники instance);
    partial void DeleteСотрудники(Сотрудники instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["mybdConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tracks> tracks
		{
			get
			{
				return this.GetTable<tracks>();
			}
		}
		
		public System.Data.Linq.Table<users> users
		{
			get
			{
				return this.GetTable<users>();
			}
		}
		
		public System.Data.Linq.Table<Зарплаты> Зарплаты
		{
			get
			{
				return this.GetTable<Зарплаты>();
			}
		}
		
		public System.Data.Linq.Table<Извещения> Извещения
		{
			get
			{
				return this.GetTable<Извещения>();
			}
		}
		
		public System.Data.Linq.Table<имеют> имеют
		{
			get
			{
				return this.GetTable<имеют>();
			}
		}
		
		public System.Data.Linq.Table<Почтовые_отправления> Почтовые_отправления
		{
			get
			{
				return this.GetTable<Почтовые_отправления>();
			}
		}
		
		public System.Data.Linq.Table<Связующая> Связующая
		{
			get
			{
				return this.GetTable<Связующая>();
			}
		}
		
		public System.Data.Linq.Table<Склады> Склады
		{
			get
			{
				return this.GetTable<Склады>();
			}
		}
		
		public System.Data.Linq.Table<Сотрудники> Сотрудники
		{
			get
			{
				return this.GetTable<Сотрудники>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tracks")]
	public partial class tracks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _индификатор_почтового_отправления;
		
		private int _индификатор_пользователя;
		
		private EntityRef<users> _users;
		
		private EntityRef<Почтовые_отправления> _Почтовые_отправления;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onиндификатор_почтового_отправленияChanging(int value);
    partial void Onиндификатор_почтового_отправленияChanged();
    partial void Onиндификатор_пользователяChanging(int value);
    partial void Onиндификатор_пользователяChanged();
    #endregion
		
		public tracks()
		{
			this._users = default(EntityRef<users>);
			this._Почтовые_отправления = default(EntityRef<Почтовые_отправления>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._Почтовые_отправления.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_индификатор_почтового_отправления", DbType="Int NOT NULL")]
		public int индификатор_почтового_отправления
		{
			get
			{
				return this._индификатор_почтового_отправления;
			}
			set
			{
				if ((this._индификатор_почтового_отправления != value))
				{
					this.Onиндификатор_почтового_отправленияChanging(value);
					this.SendPropertyChanging();
					this._индификатор_почтового_отправления = value;
					this.SendPropertyChanged("индификатор_почтового_отправления");
					this.Onиндификатор_почтового_отправленияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_индификатор_пользователя", DbType="Int NOT NULL")]
		public int индификатор_пользователя
		{
			get
			{
				return this._индификатор_пользователя;
			}
			set
			{
				if ((this._индификатор_пользователя != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onиндификатор_пользователяChanging(value);
					this.SendPropertyChanging();
					this._индификатор_пользователя = value;
					this.SendPropertyChanged("индификатор_пользователя");
					this.Onиндификатор_пользователяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_tracks", Storage="_users", ThisKey="индификатор_пользователя", OtherKey="id", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.tracks.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.tracks.Add(this);
						this._индификатор_пользователя = value.id;
					}
					else
					{
						this._индификатор_пользователя = default(int);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Почтовые_отправления_tracks", Storage="_Почтовые_отправления", ThisKey="id", OtherKey="номер_почтового_отправления", IsForeignKey=true)]
		public Почтовые_отправления Почтовые_отправления
		{
			get
			{
				return this._Почтовые_отправления.Entity;
			}
			set
			{
				Почтовые_отправления previousValue = this._Почтовые_отправления.Entity;
				if (((previousValue != value) 
							|| (this._Почтовые_отправления.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Почтовые_отправления.Entity = null;
						previousValue.tracks = null;
					}
					this._Почтовые_отправления.Entity = value;
					if ((value != null))
					{
						value.tracks = this;
						this._id = value.номер_почтового_отправления;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("Почтовые_отправления");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _password;
		
		private int _isAdmin;
		
		private int _id;
		
		private EntitySet<tracks> _tracks;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnisAdminChanging(int value);
    partial void OnisAdminChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public users()
		{
			this._tracks = new EntitySet<tracks>(new Action<tracks>(this.attach_tracks), new Action<tracks>(this.detach_tracks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAdmin", DbType="Int NOT NULL")]
		public int isAdmin
		{
			get
			{
				return this._isAdmin;
			}
			set
			{
				if ((this._isAdmin != value))
				{
					this.OnisAdminChanging(value);
					this.SendPropertyChanging();
					this._isAdmin = value;
					this.SendPropertyChanged("isAdmin");
					this.OnisAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_tracks", Storage="_tracks", ThisKey="id", OtherKey="индификатор_пользователя")]
		public EntitySet<tracks> tracks
		{
			get
			{
				return this._tracks;
			}
			set
			{
				this._tracks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tracks(tracks entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_tracks(tracks entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Зарплаты")]
	public partial class Зарплаты : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _номер_сотрудника;
		
		private System.Nullable<int> _индификатор_склада;
		
		private string _ФИО;
		
		private string _Должность;
		
		private System.Nullable<int> _Оклад;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onномер_сотрудникаChanging(int value);
    partial void Onномер_сотрудникаChanged();
    partial void Onиндификатор_складаChanging(System.Nullable<int> value);
    partial void Onиндификатор_складаChanged();
    partial void OnФИОChanging(string value);
    partial void OnФИОChanged();
    partial void OnДолжностьChanging(string value);
    partial void OnДолжностьChanged();
    partial void OnОкладChanging(System.Nullable<int> value);
    partial void OnОкладChanged();
    #endregion
		
		public Зарплаты()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_номер_сотрудника", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int номер_сотрудника
		{
			get
			{
				return this._номер_сотрудника;
			}
			set
			{
				if ((this._номер_сотрудника != value))
				{
					this.Onномер_сотрудникаChanging(value);
					this.SendPropertyChanging();
					this._номер_сотрудника = value;
					this.SendPropertyChanged("номер_сотрудника");
					this.Onномер_сотрудникаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_индификатор_склада", DbType="Int")]
		public System.Nullable<int> индификатор_склада
		{
			get
			{
				return this._индификатор_склада;
			}
			set
			{
				if ((this._индификатор_склада != value))
				{
					this.Onиндификатор_складаChanging(value);
					this.SendPropertyChanging();
					this._индификатор_склада = value;
					this.SendPropertyChanged("индификатор_склада");
					this.Onиндификатор_складаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ФИО", DbType="NVarChar(20)")]
		public string ФИО
		{
			get
			{
				return this._ФИО;
			}
			set
			{
				if ((this._ФИО != value))
				{
					this.OnФИОChanging(value);
					this.SendPropertyChanging();
					this._ФИО = value;
					this.SendPropertyChanged("ФИО");
					this.OnФИОChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Должность", DbType="NVarChar(20)")]
		public string Должность
		{
			get
			{
				return this._Должность;
			}
			set
			{
				if ((this._Должность != value))
				{
					this.OnДолжностьChanging(value);
					this.SendPropertyChanging();
					this._Должность = value;
					this.SendPropertyChanged("Должность");
					this.OnДолжностьChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Оклад", DbType="Int")]
		public System.Nullable<int> Оклад
		{
			get
			{
				return this._Оклад;
			}
			set
			{
				if ((this._Оклад != value))
				{
					this.OnОкладChanging(value);
					this.SendPropertyChanging();
					this._Оклад = value;
					this.SendPropertyChanged("Оклад");
					this.OnОкладChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Извещения")]
	public partial class Извещения : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _идентификатор_извещения;
		
		private System.Nullable<int> _номер_извещения;
		
		private System.Nullable<System.DateTime> _дата;
		
		private System.Nullable<System.DateTime> _время;
		
		private EntitySet<имеют> _имеют;
		
		private EntitySet<Связующая> _Связующая;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onидентификатор_извещенияChanging(int value);
    partial void Onидентификатор_извещенияChanged();
    partial void Onномер_извещенияChanging(System.Nullable<int> value);
    partial void Onномер_извещенияChanged();
    partial void OnдатаChanging(System.Nullable<System.DateTime> value);
    partial void OnдатаChanged();
    partial void OnвремяChanging(System.Nullable<System.DateTime> value);
    partial void OnвремяChanged();
    #endregion
		
		public Извещения()
		{
			this._имеют = new EntitySet<имеют>(new Action<имеют>(this.attach_имеют), new Action<имеют>(this.detach_имеют));
			this._Связующая = new EntitySet<Связующая>(new Action<Связующая>(this.attach_Связующая), new Action<Связующая>(this.detach_Связующая));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_идентификатор_извещения", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int идентификатор_извещения
		{
			get
			{
				return this._идентификатор_извещения;
			}
			set
			{
				if ((this._идентификатор_извещения != value))
				{
					this.Onидентификатор_извещенияChanging(value);
					this.SendPropertyChanging();
					this._идентификатор_извещения = value;
					this.SendPropertyChanged("идентификатор_извещения");
					this.Onидентификатор_извещенияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_номер_извещения", DbType="Int")]
		public System.Nullable<int> номер_извещения
		{
			get
			{
				return this._номер_извещения;
			}
			set
			{
				if ((this._номер_извещения != value))
				{
					this.Onномер_извещенияChanging(value);
					this.SendPropertyChanging();
					this._номер_извещения = value;
					this.SendPropertyChanged("номер_извещения");
					this.Onномер_извещенияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_дата", DbType="DateTime")]
		public System.Nullable<System.DateTime> дата
		{
			get
			{
				return this._дата;
			}
			set
			{
				if ((this._дата != value))
				{
					this.OnдатаChanging(value);
					this.SendPropertyChanging();
					this._дата = value;
					this.SendPropertyChanged("дата");
					this.OnдатаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_время", DbType="DateTime")]
		public System.Nullable<System.DateTime> время
		{
			get
			{
				return this._время;
			}
			set
			{
				if ((this._время != value))
				{
					this.OnвремяChanging(value);
					this.SendPropertyChanging();
					this._время = value;
					this.SendPropertyChanged("время");
					this.OnвремяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Извещения_имеют", Storage="_имеют", ThisKey="идентификатор_извещения", OtherKey="индификатор_извещения")]
		public EntitySet<имеют> имеют
		{
			get
			{
				return this._имеют;
			}
			set
			{
				this._имеют.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Извещения_Связующая", Storage="_Связующая", ThisKey="идентификатор_извещения", OtherKey="индификатор_извещения")]
		public EntitySet<Связующая> Связующая
		{
			get
			{
				return this._Связующая;
			}
			set
			{
				this._Связующая.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_имеют(имеют entity)
		{
			this.SendPropertyChanging();
			entity.Извещения = this;
		}
		
		private void detach_имеют(имеют entity)
		{
			this.SendPropertyChanging();
			entity.Извещения = null;
		}
		
		private void attach_Связующая(Связующая entity)
		{
			this.SendPropertyChanging();
			entity.Извещения = this;
		}
		
		private void detach_Связующая(Связующая entity)
		{
			this.SendPropertyChanging();
			entity.Извещения = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.имеют")]
	public partial class имеют : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _номер_почтового_отправления;
		
		private System.Nullable<int> _индификатор_извещения;
		
		private EntityRef<Извещения> _Извещения;
		
		private EntityRef<Почтовые_отправления> _Почтовые_отправления;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onномер_почтового_отправленияChanging(System.Nullable<int> value);
    partial void Onномер_почтового_отправленияChanged();
    partial void Onиндификатор_извещенияChanging(System.Nullable<int> value);
    partial void Onиндификатор_извещенияChanged();
    #endregion
		
		public имеют()
		{
			this._Извещения = default(EntityRef<Извещения>);
			this._Почтовые_отправления = default(EntityRef<Почтовые_отправления>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_номер_почтового_отправления", DbType="Int")]
		public System.Nullable<int> номер_почтового_отправления
		{
			get
			{
				return this._номер_почтового_отправления;
			}
			set
			{
				if ((this._номер_почтового_отправления != value))
				{
					if (this._Почтовые_отправления.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onномер_почтового_отправленияChanging(value);
					this.SendPropertyChanging();
					this._номер_почтового_отправления = value;
					this.SendPropertyChanged("номер_почтового_отправления");
					this.Onномер_почтового_отправленияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_индификатор_извещения", DbType="Int")]
		public System.Nullable<int> индификатор_извещения
		{
			get
			{
				return this._индификатор_извещения;
			}
			set
			{
				if ((this._индификатор_извещения != value))
				{
					if (this._Извещения.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onиндификатор_извещенияChanging(value);
					this.SendPropertyChanging();
					this._индификатор_извещения = value;
					this.SendPropertyChanged("индификатор_извещения");
					this.Onиндификатор_извещенияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Извещения_имеют", Storage="_Извещения", ThisKey="индификатор_извещения", OtherKey="идентификатор_извещения", IsForeignKey=true)]
		public Извещения Извещения
		{
			get
			{
				return this._Извещения.Entity;
			}
			set
			{
				Извещения previousValue = this._Извещения.Entity;
				if (((previousValue != value) 
							|| (this._Извещения.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Извещения.Entity = null;
						previousValue.имеют.Remove(this);
					}
					this._Извещения.Entity = value;
					if ((value != null))
					{
						value.имеют.Add(this);
						this._индификатор_извещения = value.идентификатор_извещения;
					}
					else
					{
						this._индификатор_извещения = default(Nullable<int>);
					}
					this.SendPropertyChanged("Извещения");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Почтовые_отправления_имеют", Storage="_Почтовые_отправления", ThisKey="номер_почтового_отправления", OtherKey="номер_почтового_отправления", IsForeignKey=true)]
		public Почтовые_отправления Почтовые_отправления
		{
			get
			{
				return this._Почтовые_отправления.Entity;
			}
			set
			{
				Почтовые_отправления previousValue = this._Почтовые_отправления.Entity;
				if (((previousValue != value) 
							|| (this._Почтовые_отправления.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Почтовые_отправления.Entity = null;
						previousValue.имеют.Remove(this);
					}
					this._Почтовые_отправления.Entity = value;
					if ((value != null))
					{
						value.имеют.Add(this);
						this._номер_почтового_отправления = value.номер_почтового_отправления;
					}
					else
					{
						this._номер_почтового_отправления = default(Nullable<int>);
					}
					this.SendPropertyChanged("Почтовые_отправления");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Почтовые отправления]")]
	public partial class Почтовые_отправления : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _номер_почтового_отправления;
		
		private string _кому;
		
		private string _от_кого;
		
		private string _откуда;
		
		private string _куда;
		
		private System.Nullable<System.DateTime> _дата_отправки;
		
		private bool _выдана;
		
		private int _индификатор_склада;
		
		private string _тип_отправления;
		
		private EntityRef<tracks> _tracks;
		
		private EntitySet<имеют> _имеют;
		
		private EntitySet<Связующая> _Связующая;
		
		private EntityRef<Склады> _Склады;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onномер_почтового_отправленияChanging(int value);
    partial void Onномер_почтового_отправленияChanged();
    partial void OnкомуChanging(string value);
    partial void OnкомуChanged();
    partial void Onот_когоChanging(string value);
    partial void Onот_когоChanged();
    partial void OnоткудаChanging(string value);
    partial void OnоткудаChanged();
    partial void OnкудаChanging(string value);
    partial void OnкудаChanged();
    partial void Onдата_отправкиChanging(System.Nullable<System.DateTime> value);
    partial void Onдата_отправкиChanged();
    partial void OnвыданаChanging(bool value);
    partial void OnвыданаChanged();
    partial void Onиндификатор_складаChanging(int value);
    partial void Onиндификатор_складаChanged();
    partial void Onтип_отправленияChanging(string value);
    partial void Onтип_отправленияChanged();
    #endregion
		
		public Почтовые_отправления()
		{
			this._tracks = default(EntityRef<tracks>);
			this._имеют = new EntitySet<имеют>(new Action<имеют>(this.attach_имеют), new Action<имеют>(this.detach_имеют));
			this._Связующая = new EntitySet<Связующая>(new Action<Связующая>(this.attach_Связующая), new Action<Связующая>(this.detach_Связующая));
			this._Склады = default(EntityRef<Склады>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_номер_почтового_отправления", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int номер_почтового_отправления
		{
			get
			{
				return this._номер_почтового_отправления;
			}
			set
			{
				if ((this._номер_почтового_отправления != value))
				{
					if (this._Склады.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onномер_почтового_отправленияChanging(value);
					this.SendPropertyChanging();
					this._номер_почтового_отправления = value;
					this.SendPropertyChanged("номер_почтового_отправления");
					this.Onномер_почтового_отправленияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_кому", DbType="NVarChar(20)")]
		public string кому
		{
			get
			{
				return this._кому;
			}
			set
			{
				if ((this._кому != value))
				{
					this.OnкомуChanging(value);
					this.SendPropertyChanging();
					this._кому = value;
					this.SendPropertyChanged("кому");
					this.OnкомуChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_от_кого", DbType="NVarChar(20)")]
		public string от_кого
		{
			get
			{
				return this._от_кого;
			}
			set
			{
				if ((this._от_кого != value))
				{
					this.Onот_когоChanging(value);
					this.SendPropertyChanging();
					this._от_кого = value;
					this.SendPropertyChanged("от_кого");
					this.Onот_когоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_откуда", DbType="NVarChar(20)")]
		public string откуда
		{
			get
			{
				return this._откуда;
			}
			set
			{
				if ((this._откуда != value))
				{
					this.OnоткудаChanging(value);
					this.SendPropertyChanging();
					this._откуда = value;
					this.SendPropertyChanged("откуда");
					this.OnоткудаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_куда", DbType="NVarChar(20)")]
		public string куда
		{
			get
			{
				return this._куда;
			}
			set
			{
				if ((this._куда != value))
				{
					this.OnкудаChanging(value);
					this.SendPropertyChanging();
					this._куда = value;
					this.SendPropertyChanged("куда");
					this.OnкудаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_дата_отправки", DbType="DateTime")]
		public System.Nullable<System.DateTime> дата_отправки
		{
			get
			{
				return this._дата_отправки;
			}
			set
			{
				if ((this._дата_отправки != value))
				{
					this.Onдата_отправкиChanging(value);
					this.SendPropertyChanging();
					this._дата_отправки = value;
					this.SendPropertyChanged("дата_отправки");
					this.Onдата_отправкиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_выдана", DbType="Bit NOT NULL")]
		public bool выдана
		{
			get
			{
				return this._выдана;
			}
			set
			{
				if ((this._выдана != value))
				{
					this.OnвыданаChanging(value);
					this.SendPropertyChanging();
					this._выдана = value;
					this.SendPropertyChanged("выдана");
					this.OnвыданаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_индификатор_склада", DbType="Int NOT NULL")]
		public int индификатор_склада
		{
			get
			{
				return this._индификатор_склада;
			}
			set
			{
				if ((this._индификатор_склада != value))
				{
					this.Onиндификатор_складаChanging(value);
					this.SendPropertyChanging();
					this._индификатор_склада = value;
					this.SendPropertyChanged("индификатор_склада");
					this.Onиндификатор_складаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_тип_отправления", DbType="NVarChar(255)")]
		public string тип_отправления
		{
			get
			{
				return this._тип_отправления;
			}
			set
			{
				if ((this._тип_отправления != value))
				{
					this.Onтип_отправленияChanging(value);
					this.SendPropertyChanging();
					this._тип_отправления = value;
					this.SendPropertyChanged("тип_отправления");
					this.Onтип_отправленияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Почтовые_отправления_tracks", Storage="_tracks", ThisKey="номер_почтового_отправления", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public tracks tracks
		{
			get
			{
				return this._tracks.Entity;
			}
			set
			{
				tracks previousValue = this._tracks.Entity;
				if (((previousValue != value) 
							|| (this._tracks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tracks.Entity = null;
						previousValue.Почтовые_отправления = null;
					}
					this._tracks.Entity = value;
					if ((value != null))
					{
						value.Почтовые_отправления = this;
					}
					this.SendPropertyChanged("tracks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Почтовые_отправления_имеют", Storage="_имеют", ThisKey="номер_почтового_отправления", OtherKey="номер_почтового_отправления")]
		public EntitySet<имеют> имеют
		{
			get
			{
				return this._имеют;
			}
			set
			{
				this._имеют.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Почтовые_отправления_Связующая", Storage="_Связующая", ThisKey="номер_почтового_отправления", OtherKey="номер_почтового_отправления")]
		public EntitySet<Связующая> Связующая
		{
			get
			{
				return this._Связующая;
			}
			set
			{
				this._Связующая.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Склады_Почтовые_отправления", Storage="_Склады", ThisKey="номер_почтового_отправления", OtherKey="индификатор_склада", IsForeignKey=true)]
		public Склады Склады
		{
			get
			{
				return this._Склады.Entity;
			}
			set
			{
				Склады previousValue = this._Склады.Entity;
				if (((previousValue != value) 
							|| (this._Склады.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Склады.Entity = null;
						previousValue.Почтовые_отправления = null;
					}
					this._Склады.Entity = value;
					if ((value != null))
					{
						value.Почтовые_отправления = this;
						this._номер_почтового_отправления = value.индификатор_склада;
					}
					else
					{
						this._номер_почтового_отправления = default(int);
					}
					this.SendPropertyChanged("Склады");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_имеют(имеют entity)
		{
			this.SendPropertyChanging();
			entity.Почтовые_отправления = this;
		}
		
		private void detach_имеют(имеют entity)
		{
			this.SendPropertyChanging();
			entity.Почтовые_отправления = null;
		}
		
		private void attach_Связующая(Связующая entity)
		{
			this.SendPropertyChanging();
			entity.Почтовые_отправления = this;
		}
		
		private void detach_Связующая(Связующая entity)
		{
			this.SendPropertyChanging();
			entity.Почтовые_отправления = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Связующая")]
	public partial class Связующая : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _индификатор_извещения;
		
		private System.Nullable<int> _номер_геолокации;
		
		private System.Nullable<int> _номер_сотрудника;
		
		private System.Nullable<int> _номер_почтового_отправления;
		
		private int _id;
		
		private EntityRef<Извещения> _Извещения;
		
		private EntityRef<Почтовые_отправления> _Почтовые_отправления;
		
		private EntityRef<Сотрудники> _Сотрудники;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onиндификатор_извещенияChanging(int value);
    partial void Onиндификатор_извещенияChanged();
    partial void Onномер_геолокацииChanging(System.Nullable<int> value);
    partial void Onномер_геолокацииChanged();
    partial void Onномер_сотрудникаChanging(System.Nullable<int> value);
    partial void Onномер_сотрудникаChanged();
    partial void Onномер_почтового_отправленияChanging(System.Nullable<int> value);
    partial void Onномер_почтового_отправленияChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Связующая()
		{
			this._Извещения = default(EntityRef<Извещения>);
			this._Почтовые_отправления = default(EntityRef<Почтовые_отправления>);
			this._Сотрудники = default(EntityRef<Сотрудники>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_индификатор_извещения", DbType="Int NOT NULL")]
		public int индификатор_извещения
		{
			get
			{
				return this._индификатор_извещения;
			}
			set
			{
				if ((this._индификатор_извещения != value))
				{
					if (this._Извещения.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onиндификатор_извещенияChanging(value);
					this.SendPropertyChanging();
					this._индификатор_извещения = value;
					this.SendPropertyChanged("индификатор_извещения");
					this.Onиндификатор_извещенияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_номер_геолокации", DbType="Int")]
		public System.Nullable<int> номер_геолокации
		{
			get
			{
				return this._номер_геолокации;
			}
			set
			{
				if ((this._номер_геолокации != value))
				{
					this.Onномер_геолокацииChanging(value);
					this.SendPropertyChanging();
					this._номер_геолокации = value;
					this.SendPropertyChanged("номер_геолокации");
					this.Onномер_геолокацииChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_номер_сотрудника", DbType="Int")]
		public System.Nullable<int> номер_сотрудника
		{
			get
			{
				return this._номер_сотрудника;
			}
			set
			{
				if ((this._номер_сотрудника != value))
				{
					if (this._Сотрудники.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onномер_сотрудникаChanging(value);
					this.SendPropertyChanging();
					this._номер_сотрудника = value;
					this.SendPropertyChanged("номер_сотрудника");
					this.Onномер_сотрудникаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_номер_почтового_отправления", DbType="Int")]
		public System.Nullable<int> номер_почтового_отправления
		{
			get
			{
				return this._номер_почтового_отправления;
			}
			set
			{
				if ((this._номер_почтового_отправления != value))
				{
					if (this._Почтовые_отправления.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onномер_почтового_отправленияChanging(value);
					this.SendPropertyChanging();
					this._номер_почтового_отправления = value;
					this.SendPropertyChanged("номер_почтового_отправления");
					this.Onномер_почтового_отправленияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Извещения_Связующая", Storage="_Извещения", ThisKey="индификатор_извещения", OtherKey="идентификатор_извещения", IsForeignKey=true)]
		public Извещения Извещения
		{
			get
			{
				return this._Извещения.Entity;
			}
			set
			{
				Извещения previousValue = this._Извещения.Entity;
				if (((previousValue != value) 
							|| (this._Извещения.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Извещения.Entity = null;
						previousValue.Связующая.Remove(this);
					}
					this._Извещения.Entity = value;
					if ((value != null))
					{
						value.Связующая.Add(this);
						this._индификатор_извещения = value.идентификатор_извещения;
					}
					else
					{
						this._индификатор_извещения = default(int);
					}
					this.SendPropertyChanged("Извещения");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Почтовые_отправления_Связующая", Storage="_Почтовые_отправления", ThisKey="номер_почтового_отправления", OtherKey="номер_почтового_отправления", IsForeignKey=true)]
		public Почтовые_отправления Почтовые_отправления
		{
			get
			{
				return this._Почтовые_отправления.Entity;
			}
			set
			{
				Почтовые_отправления previousValue = this._Почтовые_отправления.Entity;
				if (((previousValue != value) 
							|| (this._Почтовые_отправления.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Почтовые_отправления.Entity = null;
						previousValue.Связующая.Remove(this);
					}
					this._Почтовые_отправления.Entity = value;
					if ((value != null))
					{
						value.Связующая.Add(this);
						this._номер_почтового_отправления = value.номер_почтового_отправления;
					}
					else
					{
						this._номер_почтового_отправления = default(Nullable<int>);
					}
					this.SendPropertyChanged("Почтовые_отправления");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Сотрудники_Связующая", Storage="_Сотрудники", ThisKey="номер_сотрудника", OtherKey="номер_сотрудника", IsForeignKey=true)]
		public Сотрудники Сотрудники
		{
			get
			{
				return this._Сотрудники.Entity;
			}
			set
			{
				Сотрудники previousValue = this._Сотрудники.Entity;
				if (((previousValue != value) 
							|| (this._Сотрудники.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Сотрудники.Entity = null;
						previousValue.Связующая.Remove(this);
					}
					this._Сотрудники.Entity = value;
					if ((value != null))
					{
						value.Связующая.Add(this);
						this._номер_сотрудника = value.номер_сотрудника;
					}
					else
					{
						this._номер_сотрудника = default(Nullable<int>);
					}
					this.SendPropertyChanged("Сотрудники");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Склады")]
	public partial class Склады : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _индификатор_склада;
		
		private System.Nullable<int> _Номер_склада;
		
		private string _Адрес;
		
		private string _Город;
		
		private EntityRef<Почтовые_отправления> _Почтовые_отправления;
		
		private EntitySet<Сотрудники> _Сотрудники;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onиндификатор_складаChanging(int value);
    partial void Onиндификатор_складаChanged();
    partial void OnНомер_складаChanging(System.Nullable<int> value);
    partial void OnНомер_складаChanged();
    partial void OnАдресChanging(string value);
    partial void OnАдресChanged();
    partial void OnГородChanging(string value);
    partial void OnГородChanged();
    #endregion
		
		public Склады()
		{
			this._Почтовые_отправления = default(EntityRef<Почтовые_отправления>);
			this._Сотрудники = new EntitySet<Сотрудники>(new Action<Сотрудники>(this.attach_Сотрудники), new Action<Сотрудники>(this.detach_Сотрудники));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_индификатор_склада", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int индификатор_склада
		{
			get
			{
				return this._индификатор_склада;
			}
			set
			{
				if ((this._индификатор_склада != value))
				{
					this.Onиндификатор_складаChanging(value);
					this.SendPropertyChanging();
					this._индификатор_склада = value;
					this.SendPropertyChanged("индификатор_склада");
					this.Onиндификатор_складаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер_склада", DbType="Int")]
		public System.Nullable<int> Номер_склада
		{
			get
			{
				return this._Номер_склада;
			}
			set
			{
				if ((this._Номер_склада != value))
				{
					this.OnНомер_складаChanging(value);
					this.SendPropertyChanging();
					this._Номер_склада = value;
					this.SendPropertyChanged("Номер_склада");
					this.OnНомер_складаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Адрес", DbType="NVarChar(20)")]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this.OnАдресChanging(value);
					this.SendPropertyChanging();
					this._Адрес = value;
					this.SendPropertyChanged("Адрес");
					this.OnАдресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Город", DbType="NVarChar(255)")]
		public string Город
		{
			get
			{
				return this._Город;
			}
			set
			{
				if ((this._Город != value))
				{
					this.OnГородChanging(value);
					this.SendPropertyChanging();
					this._Город = value;
					this.SendPropertyChanged("Город");
					this.OnГородChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Склады_Почтовые_отправления", Storage="_Почтовые_отправления", ThisKey="индификатор_склада", OtherKey="номер_почтового_отправления", IsUnique=true, IsForeignKey=false)]
		public Почтовые_отправления Почтовые_отправления
		{
			get
			{
				return this._Почтовые_отправления.Entity;
			}
			set
			{
				Почтовые_отправления previousValue = this._Почтовые_отправления.Entity;
				if (((previousValue != value) 
							|| (this._Почтовые_отправления.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Почтовые_отправления.Entity = null;
						previousValue.Склады = null;
					}
					this._Почтовые_отправления.Entity = value;
					if ((value != null))
					{
						value.Склады = this;
					}
					this.SendPropertyChanged("Почтовые_отправления");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Склады_Сотрудники", Storage="_Сотрудники", ThisKey="индификатор_склада", OtherKey="индификатор_склада")]
		public EntitySet<Сотрудники> Сотрудники
		{
			get
			{
				return this._Сотрудники;
			}
			set
			{
				this._Сотрудники.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Сотрудники(Сотрудники entity)
		{
			this.SendPropertyChanging();
			entity.Склады = this;
		}
		
		private void detach_Сотрудники(Сотрудники entity)
		{
			this.SendPropertyChanging();
			entity.Склады = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Сотрудники")]
	public partial class Сотрудники : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _номер_сотрудника;
		
		private int _индификатор_склада;
		
		private string _ФИО;
		
		private string _Должность;
		
		private System.Nullable<int> _Оклад;
		
		private EntitySet<Связующая> _Связующая;
		
		private EntityRef<Склады> _Склады;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onномер_сотрудникаChanging(int value);
    partial void Onномер_сотрудникаChanged();
    partial void Onиндификатор_складаChanging(int value);
    partial void Onиндификатор_складаChanged();
    partial void OnФИОChanging(string value);
    partial void OnФИОChanged();
    partial void OnДолжностьChanging(string value);
    partial void OnДолжностьChanged();
    partial void OnОкладChanging(System.Nullable<int> value);
    partial void OnОкладChanged();
    #endregion
		
		public Сотрудники()
		{
			this._Связующая = new EntitySet<Связующая>(new Action<Связующая>(this.attach_Связующая), new Action<Связующая>(this.detach_Связующая));
			this._Склады = default(EntityRef<Склады>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_номер_сотрудника", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int номер_сотрудника
		{
			get
			{
				return this._номер_сотрудника;
			}
			set
			{
				if ((this._номер_сотрудника != value))
				{
					this.Onномер_сотрудникаChanging(value);
					this.SendPropertyChanging();
					this._номер_сотрудника = value;
					this.SendPropertyChanged("номер_сотрудника");
					this.Onномер_сотрудникаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_индификатор_склада", DbType="Int NOT NULL")]
		public int индификатор_склада
		{
			get
			{
				return this._индификатор_склада;
			}
			set
			{
				if ((this._индификатор_склада != value))
				{
					if (this._Склады.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onиндификатор_складаChanging(value);
					this.SendPropertyChanging();
					this._индификатор_склада = value;
					this.SendPropertyChanged("индификатор_склада");
					this.Onиндификатор_складаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ФИО", DbType="NVarChar(20)")]
		public string ФИО
		{
			get
			{
				return this._ФИО;
			}
			set
			{
				if ((this._ФИО != value))
				{
					this.OnФИОChanging(value);
					this.SendPropertyChanging();
					this._ФИО = value;
					this.SendPropertyChanged("ФИО");
					this.OnФИОChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Должность", DbType="NVarChar(20)")]
		public string Должность
		{
			get
			{
				return this._Должность;
			}
			set
			{
				if ((this._Должность != value))
				{
					this.OnДолжностьChanging(value);
					this.SendPropertyChanging();
					this._Должность = value;
					this.SendPropertyChanged("Должность");
					this.OnДолжностьChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Оклад", DbType="Int")]
		public System.Nullable<int> Оклад
		{
			get
			{
				return this._Оклад;
			}
			set
			{
				if ((this._Оклад != value))
				{
					this.OnОкладChanging(value);
					this.SendPropertyChanging();
					this._Оклад = value;
					this.SendPropertyChanged("Оклад");
					this.OnОкладChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Сотрудники_Связующая", Storage="_Связующая", ThisKey="номер_сотрудника", OtherKey="номер_сотрудника")]
		public EntitySet<Связующая> Связующая
		{
			get
			{
				return this._Связующая;
			}
			set
			{
				this._Связующая.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Склады_Сотрудники", Storage="_Склады", ThisKey="индификатор_склада", OtherKey="индификатор_склада", IsForeignKey=true)]
		public Склады Склады
		{
			get
			{
				return this._Склады.Entity;
			}
			set
			{
				Склады previousValue = this._Склады.Entity;
				if (((previousValue != value) 
							|| (this._Склады.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Склады.Entity = null;
						previousValue.Сотрудники.Remove(this);
					}
					this._Склады.Entity = value;
					if ((value != null))
					{
						value.Сотрудники.Add(this);
						this._индификатор_склада = value.индификатор_склада;
					}
					else
					{
						this._индификатор_склада = default(int);
					}
					this.SendPropertyChanged("Склады");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Связующая(Связующая entity)
		{
			this.SendPropertyChanging();
			entity.Сотрудники = this;
		}
		
		private void detach_Связующая(Связующая entity)
		{
			this.SendPropertyChanging();
			entity.Сотрудники = null;
		}
	}
}
#pragma warning restore 1591
